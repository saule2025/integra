# Generated by Django 4.2.2 on 2024-01-21 10:05
# Generated by Django 4.2.2 on 2024-01-15 03:41
from pickle import FALSE, TRUE
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

from django.db import migrations
# Подключаем модуль для работы с датой/веременем
from datetime import datetime, timedelta
# Подключаем модкль генерации случайных чисел
import random

global dict_category
dict_category = {}
global dict_catalog_price
dict_catalog_price = {}
global dict_position
dict_position = {}

# Получение случайного адреса (k - включает ли адрес квартиру)
def get_adres(k):
    ulica = ["ул. Баженова", 
            "ул. Вавилова", 
            "ул. Гастелло", 
            "ул. Гончарная", 
            "ул. Грибоедова", 
            "ул. Дружбы", 
            "ул. Ермекова",
            "ул. Жамбыла", 
            "ул. Защитная", 
            "ул. Ипподромная", 
            "ул. Караванная", 
            "ул. Кирпичная", 
            "ул. Луначарского", 
            "ул. Маяковского", 
            "ул. Некрасова", 
            "ул. Новоселов",
            "ул. Олимпийская", 
            "ул. Победы", 
            "ул. Садовая", 
            "ул. Стремянная", 
            "ул. Университетская", 
            "ул. Фрунзе",
            "ул. Чайковского" 
        ]
    if (k==True):
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) + "-" + str(random.randint(1, 200)) 
    else:
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) 
    return adres

# Получение случайного телефона
def get_telefon():
    if random.randint(0, 1) == 1:
        telefon = "+7-701-"
    else:
        telefon = "+7-705-" 
    telefon = telefon + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + "-" + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) 
    return telefon

# Найти или Добавить Категорию
def get_category(apps, val):   
    # Поиск категории
    if val in dict_category.values():
        for k, v in dict_category.items():
            if v == val:
                return k    
    else:
        Category = apps.get_model("soft", "Category")
        category = Category()
        category.title = val
        category.save()
        dict_category[category.id] = category.title
        return category.id

# Добавить товар (услугу)
def insert_catalog(apps, param_catalog):   
    # Добавить товар
    Catalog = apps.get_model("soft", "Catalog")
    catalog = Catalog()
    catalog.category_id = param_catalog[0]
    catalog.code = param_catalog[1]
    catalog.title = param_catalog[2]
    catalog.details = param_catalog[3]
    catalog.price = param_catalog[4]
    catalog.save()
    dict_catalog_price[catalog.id] = catalog.price    
    return

# Добавить Клиента 
def insert_client(apps, param):
    Client = apps.get_model("soft", "Client")
    client = Client()
    client.name = param[0]
    client.phone = param[1]
    client.leader = param[2]
    client.save()
    return 

# Найти или Добавить Должность
def get_position(apps, val):   
    # Поиск категории
    if val in dict_position.values():
        for k, v in dict_position.items():
            if v == val:
                return k    
    else:
        Position = apps.get_model("soft", "Position")
        position = Position()
        position.title = val
        position.save()
        dict_position[position.id] = position.title
        return position.id

# Добавить Сотрудника 
def insert_employee(apps, param):
    Employee = apps.get_model("soft", "Employee")
    employee = Employee()
    employee.full_name = param[0]
    employee.position_id = param[1]
    employee.phone = param[2]
    employee.save()
    return 

# Добавить Продажи 
def insert_sale(apps, param):
    Sale = apps.get_model("soft", "Sale")
    sale = Sale()
    sale.dates = param[0]
    sale.catalog_id = param[1]
    sale.client_id = param[2]
    sale.employee_id = param[3]
    sale.save()
    return 

# Добавить заявки клиента 
def insert_application(apps, param_application):   
    Application = apps.get_model("soft", "Application")
    application = Application()
    application.datea = param_application[0]
    application.user_id = param_application[1]
    application.title = param_application[2]
    application.details = param_application[3]
    application.save()
    application.datea = param_application[0]
    application.save()
    # Добавить движенеи заявки
    parameters = [application.id, application.datea, "Заявка принята", "Заявка принята в обработку"]
    insert_movement(apps, parameters)
    parameters = [application.id, application.datea + timedelta(days=1), "Заявка в работе", "Заявка в работе"]
    insert_movement(apps, parameters)
    return

# Добавить движение заявки клиента 
def insert_movement(apps, param_movement):   
    Movement = apps.get_model("soft", "Movement")
    movement = Movement()
    movement.application_id = param_movement[0]
    movement.datem = param_movement[1]
    movement.status = param_movement[2]
    movement.details = param_movement[3]
    movement.save()
    movement.datem = param_movement[1]
    movement.save()
    return

# Добавить Новости
def insert_news(apps, param):
    News = apps.get_model("soft", "News")
    news = News()
    news.daten = param[0]
    news.title = param[1]
    news.details = param[2]
    news.photo = param[3]
    news.save()
    return 

# Начальные данные 
def new_data(apps, schema_editor):
    try:
        # Суперпользователь id=1
        user = User.objects.create_superuser(username='root',
        email='integra100124@mail.ru',
        first_name='Алексей', 
        last_name='Дюднев',
        password='SsNn5678+-@')
        print("Суперпользователь создан")
    
        # Группа менеджеров
        managers = Group.objects.get_or_create(name = 'Managers')
        managers = Group.objects.get(name='Managers')
        print("Группа менеджеров создана")
    
        # Пользователь с ролью менеджера id=2
        user = User.objects.create_user(username='manager', password='Ss0066+-', email='manager@mail.ru', first_name='Вадим', last_name='Куляев')
        managers.user_set.add(user)
        print("Менеджер добавлен в группу менеджеров")

        # Группа сотрудников
        employees = Group.objects.get_or_create(name = 'Employees')
        employees = Group.objects.get(name='Employees')
        print("Группа сотрудников создана")
    
        # Пользователь с ролью сотрудника id=3-5
        user = User.objects.create_user(username='employee1', password='Ss0066+-', email='employee1@mail.ru', first_name='Айгуль', last_name='Ташетова')
        employees.user_set.add(user)
        user = User.objects.create_user(username='employee2', password='Ss0066+-', email='employee2@mail.ru', first_name='Евгений', last_name='Батаев')
        employees.user_set.add(user)
        user = User.objects.create_user(username='employee3', password='Ss0066+-', email='employee3@mail.ru', first_name='Илья', last_name='Васильев')
        employees.user_set.add(user)
        print("Сотрудник добавлен в группу сотрудников")

        # Простые пользователи () id6-15
        user = User.objects.create_user(username='user1', password='Uu0066+-', email='user1@mail.ru', first_name='Анастасия', last_name='Соколенко')
        user = User.objects.create_user(username='user2', password='Uu0066+-', email='user2@mail.ru', first_name='Алексей', last_name='Сиваш')
        user = User.objects.create_user(username='user3', password='Uu0066+-', email='user3@mail.ru', first_name='Дарья', last_name='Лосева')
        user = User.objects.create_user(username='user4', password='Uu0066+-', email='user4@mail.ru', first_name='Виктор', last_name='Панин')
        user = User.objects.create_user(username='user5', password='Uu0066+-', email='user5@mail.ru', first_name='Дмитрий', last_name='Кобзев')
        user = User.objects.create_user(username='user6', password='Uu0066+-', email='user6@mail.ru', first_name='Илья', last_name='Яцковский')
        user = User.objects.create_user(username='user7', password='Uu0066+-', email='user7@mail.ru', first_name='Сергей', last_name='Лобкарев')
        user = User.objects.create_user(username='user8', password='Uu0066+-', email='user8@mail.ru', first_name='Андрей', last_name='Сорока')
        user = User.objects.create_user(username='user9', password='Uu0066+-', email='user9@mail.ru', first_name='Елена', last_name='Гончарова')
        user = User.objects.create_user(username='user10', password='Uu0066+-', email='user10@mail.ru', first_name='Виктория', last_name='Токарева')        
        print("Созданы простые пользователи")

        #1 Каталог parameters - товар, (накладная, категория, название, описание, цена, количество, склад)
        parameters = [get_category(apps, "Программное обеспечение"), "2900002163513", "1С:Бухгалтерия 8 для Казахстана. Базовая версия. Электронная поставка", """1С:Бухгалтерия 8 для Казахстана. Базовая версия. Электронная поставка""", 25900]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "2900002163537", "1С:Предприятие 8. Управление торговлей для Казахстана. Базовая версия. Электронная поставка", """1С:Предприятие 8. Управление торговлей для Казахстана. Базовая версия. Электронная поставка""", 36300]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "2900002163551", "1С:Предприятие 8. Розница для Казахстана. Базовая версия. Электронная поставка", """1С:Предприятие 8. Розница для Казахстана. Базовая версия. Электронная поставка""", 25900]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "2900002163575", "1С:Предприятие 8. Управление нашей фирмой для Казахстана. Базовая версия. Электронная поставка", """1С:Предприятие 8. Управление нашей фирмой для Казахстана. Базовая версия. Электронная поставка""", 36300]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546095817", "1С:Бухгалтерия 8 для Казахстана. ПРОФ версия", """1С:Бухгалтерия 8 для Казахстана. ПРОФ версия""", 84300]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546095824", "1С:Бухгалтерия 8 для Казахстана. Комплект на 5 пользователей. ПРОФ версия", """1С:Бухгалтерия 8 для Казахстана. Комплект на 5 пользователей. ПРОФ версия""", 196600]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546095848", "1С:Предприятие 8. Управление торговлей для Казахстана. ПРОФ версия", """1С:Предприятие 8. Управление торговлей для Казахстана. ПРОФ версия""", 118000]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546062628", "1С:Предприятие 8. Управление торговым предприятием для Казахстана (USB). ПРОФ версия", """1С:Предприятие 8. Управление торговым предприятием для Казахстана (USB). ПРОФ версия""", 624000]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546095855", "1С:Предприятие 8. Комплект прикладных решений на 5 пользователей для Казахстана. ПРОФ версия", """1С:Предприятие 8. Комплект прикладных решений на 5 пользователей для Казахстана. ПРОФ версия""", 308900]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Программное обеспечение"), "4601546104649", "1С:Предприятие 8. Свод отчетов для Казахстана. ПРОФ версия", """1С:Предприятие 8. Свод отчетов для Казахстана. ПРОФ версия""", 702000]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Методические материалы и летература"), "4601546147097", "Сборник задач для подготовки к экзамену \"1С:Специалист-консультант по внедрению прикладного решения \"1С:Бухгалтерия 8 для Казахстана\"", """Сборник задач для подготовки к экзамену \"1С:Специалист-консультант по внедрению прикладного решения \"1С:Бухгалтерия 8 для Казахстана\"""", 6000]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Методические материалы и летература"), "2900001600323", "1С:Предпр.8 Конфигурация \"Бухгалтерия для Казахстана\". Ред.3.0. Руководство по ведению учета", """1С:Предпр.8 Конфигурация \"Бухгалтерия для Казахстана\". Ред.3.0. Руководство по ведению учета""", 1500] 		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Методические материалы и летература"), "2900001417280", "1С:Предприятие 8. Свод отчетов для Казахстана. Редакция 1.0. Руководство по подготовке консолидированной отчетности	", """1С:Предприятие 8. Свод отчетов для Казахстана. Редакция 1.0. Руководство по подготовке консолидированной отчетности	""", 1500]	
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Методические материалы и летература"), "2900003621043", "1С:Предприятие 8. Конфигурация \"Управление холдингом для Казахстана\". Редакция 3.2.", """1С:Предприятие 8. Конфигурация \"Управление холдингом для Казахстана\". Редакция 3.2.""", 6000]	 	
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Методические материалы и летература"), "2900001785112", "Конфигурация \"1С:CRM для Казахстана. Модуль для 1С:УТ, 1С:КА2 и 1С:ERP\". Руководство пользователя", """Конфигурация \"1С:CRM для Казахстана. Модуль для 1С:УТ, 1С:КА2 и 1С:ERP\". Руководство пользователя""", 2250]		
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Установка и сопровождение программ"), "-", "1C:ИТС Казахстан ПРОФ на 12 месяцев", """1C:ИТС Казахстан ПРОФ на 12 месяцев""", 130000]
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Установка и сопровождение программ"), "-", "От 1 до 5 ИТС Казахстан для удаленного офиса, на 12 месяцев", """От 1 до 5 ИТС Казахстан для удаленного офиса, на 12 месяцев""", 18000]
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Установка и сопровождение программ"), "-", "От 6 до 10 ИТС для удаленного офиса, на 12 месяцев", """От 6 до 10 ИТС для удаленного офиса, на 12 месяцев""", 16200]
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Установка и сопровождение программ"), "-", "От 11 до 20 ИТС для удаленного офиса, на 12 месяцев", """От 11 до 20 ИТС для удаленного офиса, на 12 месяцев""", 14400]
        insert_catalog(apps, parameters)    
        parameters = [get_category(apps, "Установка и сопровождение программ"), "-", "От 21 до 50 ИТС для удаленного офиса, на 12 месяцев", """От 21 до 50 ИТС для удаленного офиса, на 12 месяцев""", 12600]
        insert_catalog(apps, parameters)
        print("Каталог ok")
        
        # Клиент
        parameters = ["ООО ТЭК Глобал Логистик", get_telefon(), "Карсакин Георгий Дмитриевич"]
        insert_client(apps, parameters)  
        parameters = ["ООО ИНТЭКСТ", get_telefon(), "Минаков Илья Юрьевич"]
        insert_client(apps, parameters)  
        parameters = ["ООО Эксперт Регион", get_telefon(), "Трощенко Ксения Алексеевна"]
        insert_client(apps, parameters)  
        parameters = ["Авантаж,Юридическая компания, ООО", get_telefon(), "Осташевский Никита Олегович"]
        insert_client(apps, parameters)  
        parameters = ["DayGroup", get_telefon(), "Мелентьев Сергей Юрьевич"]
        insert_client(apps, parameters)  
        parameters = ["ООО ПраймАвтоматик", get_telefon(), "Лашин Сергей Олегович"]
        insert_client(apps, parameters)  
        parameters = ["Глобал Логистик", get_telefon(), "Иконописцева Екатерина Олеговна"]
        insert_client(apps, parameters)  
        parameters = ["ООО Паутина", get_telefon(), "Гурьянов Владимир Владимирович"]
        insert_client(apps, parameters)  
        parameters = ["ООО Voice", get_telefon(), "Василенко Виктор Андреевич"]
        insert_client(apps, parameters)  
        parameters = ["Полимер Центр", get_telefon(), "Магун Ирина Владимировна"]
        insert_client(apps, parameters)  
        print("Клиент ok")

        # Сотрудник
        parameters = ["Василенко Кирилл Денисович", get_position(apps, "Директор"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Зайцев Эдуард Станиславович", get_position(apps, "Заместитель директора"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Лохтина Екатерина Антоновна", get_position(apps, "Главный бухгалтер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Буждиган Ирина Викторовна", get_position(apps, "Начальник отдела"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Грабовский Вячеслав Юрьевич", get_position(apps, "Главный менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Концур Андрей Валерьевич", get_position(apps, "Менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Панова Наталья Александровна", get_position(apps, "Менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Кочкуркина Ирина Алексеевна", get_position(apps, "Менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Кокорская Тамара Антоновна", get_position(apps, "Менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        parameters = ["Ли Андрей Сергеевич", get_position(apps, "Менеджер"), get_telefon()]
        insert_employee(apps, parameters)  
        print("Сотрудник ok")

        # Продажи
        parameters = [datetime.now() - timedelta(days=21) + timedelta(minutes=random.randint(1, 120)), 1, 1, 5]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 120)), 2, 2, 6]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 120)), 3, 3, 7]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 120)), 4, 4, 8]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 120)), 5, 5, 9]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 120)), 6, 6, 10]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=15) + timedelta(minutes=random.randint(1, 120)), 7, 7, 5]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=14) + timedelta(minutes=random.randint(1, 120)), 8, 8, 6]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=13) + timedelta(minutes=random.randint(1, 120)), 9, 9, 7]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=12) + timedelta(minutes=random.randint(1, 120)), 10, 10, 8]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=11) + timedelta(minutes=random.randint(1, 120)), 17, 1, 9]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=10) + timedelta(minutes=random.randint(1, 120)), 18, 2, 10]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=9) + timedelta(minutes=random.randint(1, 120)), 19, 3, 5]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=8) + timedelta(minutes=random.randint(1, 120)), 20, 4, 6]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=7) + timedelta(minutes=random.randint(1, 120)), 17, 5, 7]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=6) + timedelta(minutes=random.randint(1, 120)), 18, 6, 8]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=5) + timedelta(minutes=random.randint(1, 120)), 19, 7, 9]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=4) + timedelta(minutes=random.randint(1, 120)), 20, 8, 10]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=3) + timedelta(minutes=random.randint(1, 120)), 17, 9, 5]
        insert_sale(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=2) + timedelta(minutes=random.randint(1, 120)), 18, 10, 6]
        insert_sale(apps, parameters)     
        print("Продажи ok")

        # Добавить Заявки  
        parameters = [datetime.now() - timedelta(days=14) + timedelta(minutes=random.randint(1, 120)), 6, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для ресторанного бизнеса"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=13) + timedelta(minutes=random.randint(1, 120)), 7, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для гостиничного бизнеса"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=12) + timedelta(minutes=random.randint(1, 120)), 8, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для предприятия торговли"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=11) + timedelta(minutes=random.randint(1, 120)), 9, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для инженерно-технической службы"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=10) + timedelta(minutes=random.randint(1, 120)), 10, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для предприятия торговли"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=9) + timedelta(minutes=random.randint(1, 120)), 11, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для салона красоты"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=8) + timedelta(minutes=random.randint(1, 120)), 12, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для медицинского учреждения"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=7) + timedelta(minutes=random.randint(1, 120)), 13, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для оптовой базы"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=6) + timedelta(minutes=random.randint(1, 120)), 14, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для ресторанного бизнеса"]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=5) + timedelta(minutes=random.randint(1, 120)), 15, "Настройка и внедрение 1С", "Имеется заинтересованность во внедрении программы 1С для предприятия торговли"]
        insert_application(apps, parameters)
        print("Заявки ok")

        # Добавить Новости
        parameters = [datetime.now() - timedelta(days=7) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (3.1.1.70) для конфигурации «Зарплата и Управление персоналом для Казахстана», редакции 3.1", """Реализованы изменения расчета при увольнении сотрудника в соответствии с ответом Министра труда и социальной защиты https://dialog.egov.kz/blogs/all-questions/655937: предыдущий рабочий день до даты расторжения трудового договора с работником является последним рабочим днем работника.
Важно! С подробным описанием можно ознакомиться в дополнении к документации, расположенном в каталоге AddDoc каталога установки шаблонов обновления конфигурации.
Ведомость на счета (формирование МТ – 102)
Добавлена возможность формирования документа «Платежное поручение» на основании документа «Ведомость на счета». В документе «Платежное поручение» с выплатой по документу «Ведомость на счета» предусмотрено формирование swift файла по кнопке «Выгрузить в МТ-102».
Важно! С подробным описанием можно ознакомиться в дополнении к документации, расположенном в каталоге AddDoc каталога установки шаблонов обновления конфигурации.""", "images/news1.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=6) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (3.0.39.3) для конфигурации «Бухгалтерия для Казахстана» редакция 3.0", """Регламентированная отчетность
Декларация по налогу на добавленную стоимость, форма 300.00
В состав конфигурации включена Форма «300.00», утвержденная приказом Первого заместителя Премьера-министра РК – Министра финансов РК от 20.01.2020 года № 39. Для формы реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_300.00.v27.r153 от 23.02.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.
Заявление о ввозе товаров и уплате косвенных налогов, форма 328.00
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_328_00_v10_r112 от 17.02.2021 г.
Расчёт текущих платежей по земельному налогу и налогу на имущество, форма 701.00
В состав конфигурации включена форма 701.00, утвержденная приказом Первого заместителя Премьер-Министра РК – Министра финансов РК от 20 января 2020 года № 39. Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_701_00_v15_r52 от 21.12.2020 г.
Шаблон применяется для сдачи отчетности в 2021 году.""", "images/news2.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=5) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (3.0.39.7) для конфигурации «Бухгалтерия для Казахстана (базовая)» редакция 3.0", """Регламентированная отчетность
Декларация по индивидуальному подоходному налогу и социальному налогу, форма 200.00
В состав комплекта включена форма, утвержденная Приказом Первого заместителя Премьер-Министра Республики Казахстан – Министра финансов Республики Казахстан от 20 января 2020 года № 39 (приложение 78).
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_200_00_v30_r128 от 01.04.2021г.
Шаблон применяется для сдачи отчетности в 2021 году.
Классификаторы
Классификатор кодов ТНВЭД актуализирован по состоянию на 16.04.2021 года.
Классификатор «Перечень изъятий» актуализирован по состоянию на 03.04.2021 года.
Классификатор банков актуализирован по состоянию на 16.04.2021 года.
Исправлены ошибки
Исправлено поведение признака Корректировка НДС в документе Списание ТМЗ, введенного на основании документа Перемещение ТМЗ.
Исправлено формирование Акта сверки взаиморасчетов по контрагенту «Розничный покупатель».
Скорректирован доступ к отдельным объектам для профиля Полные права.
Исправлена возможность выгрузки 328 формы в веб клиенте.
Исправлены прочие выявленные ошибки и замечания.""", "images/news3.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=4) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (2.4.4.87) для конфигурации «Комплексная автоматизация для Казахстана» редакция 2.4", """Сопроводительные накладные на товары
1. Реализована возможность выписки СНТ по перемещению товаров между филиалами. Для этих целей добавлен новый вид операции СНТ «Перемещение между» филиалами.
В информационной базе создается один документ с данным видом операции в списке исходящих СНТ:
— отправка такого СНТ выполняется от имени Поставщика;
— подтверждение/отклонение/получение ИД товаров выполняется от имени Получателя в этом же документе.
В результате перемещения между филиалами, товарам присваивается новый ИД, данный ИД запрашивается с сервера и хранится в поле «Идентификатор товара склада-получателя». При проведении документа формируется новый источник происхождения для филиала-получателя, данный источник хранится в поле «Источник происхождения получателя». При проведении документа формируются движения:
— Расход для филиала-отправителя;
— Приход для филиала-получателя
2. Реализована возможность создания документа ЭДВС с типом формы «Внутреннее перемещение» на основании входящих СНТ для перемещения товаров со склада нераспределенных товаров на физический, в случаях если при выписке СНТ поставщик не указал ИД склада.
Регламентированная отчетность
Расчёт текущих платежей по налогу на транспортные средства, форма 701.00
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_701_00_v15_r52 от 21.12.2020 г.
Декларация по налогу на добавленную стоимость, форма 300.00""", "images/news4.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=3) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (2.0.34.3) для конфигурации «Бухгалтерия для Казахстана » редакция 2.0", """Регламентированные отчеты
Декларация по индивидуальному подоходному налогу и социальному налогу, форма 200.00
В состав комплекта включена форма, утвержденная Приказом Первого заместителя Премьер-Министра Республики Казахстан – Министра финансов Республики Казахстан от 20 января 2020 года № 39 (приложение 78).
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_200_00_v31_r131 от 01.04.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.
Важно! Перед заполнением отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» по всем видам полностью или частично необлагаемых начислений доходов, необходимо в видах расчета на закладке «Учет» в строке «Код строки Декларации по ИПН и СН» указать статью Налогового кодекса, в соответствии с которой доход является необлагаемым.
В случае, если для видов начислений доходов (полностью и частично необлагаемых) не будет указан код строки декларации ИПН и СН, при заполнении отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» будет выдано соответствующее сообщение.
Декларация по налогу на добавленную стоимость, форма 300.00
В состав конфигурации включена Форма «300.00», утвержденная приказом Первого заместителя Премьера-министра РК – Министра финансов РК от 20.01.2020 года № 39. Для формы реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_300.00.v27.r153 от 23.02.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.""", "images/news5.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=2) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (2.0.21.4) для конфигурации «Управление торговым предприятием для Казахстана», редакция 2.0", """Регламентированные отчеты
Декларация по индивидуальному подоходному налогу и социальному налогу, форма 200.00
В состав комплекта включена форма, утвержденная Приказом Первого заместителя Премьер-Министра Республики Казахстан – Министра финансов Республики Казахстан от 20 января 2020 года № 39 (приложение 78).
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_200_00_v31_r131 от 01.04.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.
Важно! Перед заполнением отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» по всем видам полностью или частично необлагаемых начислений доходов, необходимо в видах расчета на закладке «Учет» в строке «Код строки Декларации по ИПН и СН» указать статью Налогового кодекса, в соответствии с которой доход является необлагаемым.
В случае, если для видов начислений доходов (полностью и частично необлагаемых) не будет указан код строки декларации ИПН и СН, при заполнении отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» будет выдано соответствующее сообщение.
Декларация по налогу на добавленную стоимость, форма 300.00
В состав конфигурации включена Форма «300.00», утвержденная приказом Первого заместителя Премьера-министра РК – Министра финансов РК от 20.01.2020 года № 39. Для формы реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_300.00.v27.r153 от 23.02.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.""", "images/news6.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=1) + timedelta(minutes=random.randint(1, 120)), "Выпущен релиз (1.3.21.3) для конфигурации «Управление производственным предприятием для Казахстана», редакция 1.3", """Регламентированная отчетность
1. Декларация по индивидуальному подоходному налогу и социальному налогу, форма 200.00
В состав конфигурации включена форма, утвержденная Приказом Первого заместителя Премьер-Министра Республики Казахстан – Министра финансов Республики Казахстан от 20 января 2020 года № 39 (приложение 78).
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_200_00_v31_r131 от 01.04.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.
Важно! Перед заполнением отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» по всем видам полностью или частично необлагаемых начислений доходов, необходимо в основных/дополнительных видах расчета на закладке «Бухгалтерский и налоговый учет» в строке «Код строки Декларации по СН» указать статью Налогового кодекса, в соответствии с которой доход является необлагаемым. В случае, если для видов начислений доходов (полностью и частично необлагаемых) не будет указан код строки декларации ИПН и СН, при заполнении отчета «Форма 200.00. Декларация по индивидуальному подоходному налогу и социальному налогу» будет выдано соответствующее сообщение.
2. Декларация по налогу на добавленную стоимость, форма 300.00
В состав конфигурации включена Форма «300.00», утвержденная приказом Первого заместителя Премьера-Министра РК – Министра финансов РК от 20.01.2020 года № 39 (приложение 84).
Реализована возможность выгрузки данных в формате XML для шаблона ИС СОНО form_300.00.v27.r153 от 23.02.2021 г.
Шаблон применяется для сдачи отчетности в 2021 году.""", "images/news7.jpg" ]
        insert_news(apps, parameters)
        print("Новости ok")

    except Exception as error:
        print(error)


class Migration(migrations.Migration):

    dependencies = [
        ('soft', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(new_data),
        
    ]

